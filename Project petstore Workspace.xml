<export><workspace name="Project petstore"><query name="clear documents" focus="false" listorder="1" taborder="1" active="true" database="4764615340605620970" server="11761150019421516864" database-name="petstore-content" server-name="petstore" mode="xquery">if (xdmp:database-name(xdmp:database()) = "petstore-content") 

then

  for $doc in fn:doc()
  let $uri := fn:base-uri($doc)
  return xdmp:document-delete($uri)

else

  "please select the petstore-content database"</query><query name="add collection" focus="false" listorder="2" taborder="2" active="true" database="4764615340605620970" server="11761150019421516864" database-name="petstore-content" server-name="petstore" mode="xquery">xquery version "1.0-ml";
xdmp:document-add-collections("Rottweiler.xml", "pets")</query><query name="reportgeneration" focus="false" listorder="3" taborder="3" active="true" database="4764615340605620970" server="11761150019421516864" database-name="petstore-content" server-name="petstore" mode="xquery">xquery version "1.0-ml";
import module namespace pet-json = "http://pets.com/pets-json" at "generate-report.xqy";
pet-json:report-generation()
</query><query name="Query 1" focus="false" listorder="4" taborder="" active="false" database="4764615340605620970" server="11761150019421516864" database-name="petstore-content" server-name="petstore" mode="xquery">xquery version "1.0-ml";
declare namespace pet-json = "http://pets.com/pets-json";

declare function pet-json:report-generation()
{
"hello word"
};
let $x := pet-json:report-generation()
return $x</query><query name="Query 2" focus="false" listorder="5" taborder="" active="false" database="4764615340605620970" server="11761150019421516864" database-name="petstore-content" server-name="petstore" mode="xquery">xquery version "1.0-ml";
declare namespace test = "my-namespace";
declare function test:my-function(){
"hello world"
};
let $x := test:my-function()
return $x
</query><query name="Query 3" focus="false" listorder="6" taborder="4" active="true" database="4764615340605620970" server="11761150019421516864" database-name="petstore-content" server-name="petstore" mode="xquery">xquery version "1.0-ml";
declare function local:get-pets-map($get-pets-result)
{  

    for $uri in $get-pets-result
    return 
        let $pet-map:= map:new((
        map:entry("name",fn:doc($uri)/pet/name),
        map:entry("species",fn:doc($uri)/pet/species),
        map:entry("birth",fn:doc($uri)/pet/birth)
    ))
    return $pet-map
    
};

let $results := cts:uris("", "ascending", cts:and-query(cts:collection-query("pets"), "ordered"), (), ())
return local:get-pets-map($results)</query><query name="Query 4" focus="false" listorder="7" taborder="6" active="true" database="4764615340605620970" server="11761150019421516864" database-name="petstore-content" server-name="petstore" mode="xquery">xquery version "1.0-ml";
fn:doc("Purrsloud.xml")/pet/name</query><query name="Query 5" focus="true" listorder="8" taborder="5" active="true" database="4764615340605620970" server="11761150019421516864" database-name="petstore-content" server-name="petstore" mode="xquery">xquery version "1.0-ml";
declare function local:get-pets-map($get-pets-result)
{  

  let $map := map:map()
  let $total := for $uri at $counter in $get-pets-result
    let $doc := fn:doc($uri)
    let $pet-name := $doc/pet/name  
    let $pet-species := $doc/pet/species 
    let $pet-birth := $doc/pet/birth 
    
    let $pet-map:= map:new((
        map:entry("name",$pet-name),
        map:entry("species",$pet-species),
        map:entry("birth",$pet-birth)
    ))
    return map:put($map, string($counter), $pet-map)
   return xdmp:to-json($map)
};

let $results := cts:uris("", "ascending", cts:and-query(cts:collection-query("pets"), "ordered"), (), ())
return local:get-pets-map($results)</query></workspace></export>
